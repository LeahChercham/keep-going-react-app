{"ast":null,"code":"import Axios from 'axios';\nimport consts from '../../consts';\nimport { AUTH_FAIL, AUTH_SUCCESS, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, CLEAR_ERROR, USER_LOGOUT, USER_UPDATE_SUCCESS, USER_GET_FAIL, USER_GET_SUCCESS, USER_UPDATE_FAIL } from '../types/authType';\nconst CREATE_ROUTE = consts.CREATE_ROUTE;\nexport const userRegister = user => {\n  return async dispatch => {\n    try {\n      const response = await Axios.post(CREATE_ROUTE(\"user\"), user);\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: {\n          successMessage: response.data.successMessage,\n          user: response.data.user\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: AUTH_FAIL,\n        payload: {\n          error: error.response.data.error.errorMessage\n        }\n      });\n    }\n  };\n};\nexport const userLogin = data => {\n  let {\n    username,\n    password\n  } = data;\n\n  if (!password) {\n    alert(\"Please enter your password.\");\n  }\n\n  if (!username) {\n    alert(\"Please enter your username.\");\n  }\n\n  return async dispatch => {\n    try {\n      let response = await Axios.get(CREATE_ROUTE(`login/${username}/${password}`)); // asynchronous function\n\n      console.log(\"in user Update\");\n      console.log(response.data);\n\n      if (response.data.error) {\n        dispatch({\n          type: USER_LOGIN_FAIL,\n          payload: {\n            error: response.data.error.errorMessage\n          }\n        });\n      } else {\n        let login = {\n          isLoggedIn: true,\n          user: response.data.user\n        };\n        localStorage.login = JSON.stringify(login);\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: {\n            successMessage: response.data.successMessage,\n            user: response.data.user\n          }\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: {\n          error: error.response.data.error.errorMessage\n        }\n      });\n    }\n  };\n};\nexport const userLogout = () => {\n  localStorage.clear();\n  return dispatch => dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const userUpdate = data => {\n  let updateUser = data.updateUser;\n  let username = updateUser.username;\n  let oldKeywords = data.oldKeywords;\n  let transferData = {\n    updateUser,\n    oldKeywords\n  };\n  return async dispatch => {\n    try {\n      let response = await Axios.put(CREATE_ROUTE(`user/${username}`), transferData);\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: {\n          successMessage: response.data.successMessage,\n          user: response.data.user\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload: {\n          error: error.response.data.error.errorMessage\n        }\n      });\n    }\n  };\n};\nexport const userGet = user => {\n  let {\n    username\n  } = user;\n  return async dispatch => {\n    try {\n      let response = await Axios.get(CREATE_ROUTE(`user/username/${username}`));\n      dispatch({\n        type: USER_GET_SUCCESS,\n        payload: {\n          successMessage: \"success\",\n          user: response.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_GET_FAIL,\n        payload: {\n          error: error.response.data.error.errorMessage\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["Axios","consts","AUTH_FAIL","AUTH_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","CLEAR_ERROR","USER_LOGOUT","USER_UPDATE_SUCCESS","USER_GET_FAIL","USER_GET_SUCCESS","USER_UPDATE_FAIL","CREATE_ROUTE","userRegister","user","dispatch","response","post","type","payload","successMessage","data","error","errorMessage","userLogin","username","password","alert","get","console","log","login","isLoggedIn","localStorage","JSON","stringify","userLogout","clear","userUpdate","updateUser","oldKeywords","transferData","put","userGet"],"sources":["C:/Users/LeahC/OneDrive/Documents/AKAD/ABSCHLUSS BAK PROJ BACH/PROJEKT/ProjectCode/keep-going-react-app/frontend/src/store/actions/authActions.js"],"sourcesContent":["import Axios from 'axios';\r\nimport consts from '../../consts'\r\nimport { AUTH_FAIL, AUTH_SUCCESS, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, CLEAR_ERROR, USER_LOGOUT, USER_UPDATE_SUCCESS, USER_GET_FAIL, USER_GET_SUCCESS, USER_UPDATE_FAIL } from '../types/authType';\r\nconst CREATE_ROUTE = consts.CREATE_ROUTE\r\n\r\nexport const userRegister = (user) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            const response = await Axios.post(CREATE_ROUTE(\"user\"), user)\r\n            dispatch({\r\n                type: AUTH_SUCCESS,\r\n                payload: {\r\n                    successMessage: response.data.successMessage,\r\n                    user: response.data.user,\r\n                }\r\n            })\r\n        } catch (error) {\r\n            dispatch({\r\n                type: AUTH_FAIL,\r\n                payload: { error: error.response.data.error.errorMessage }\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const userLogin = (data) => {\r\n    let { username, password } = data\r\n    if (!password) { alert(\"Please enter your password.\") }\r\n    if (!username) { alert(\"Please enter your username.\") }\r\n\r\n    return async dispatch => {\r\n        try {\r\n            let response = await Axios.get(CREATE_ROUTE(`login/${username}/${password}`)) // asynchronous function\r\n            console.log(\"in user Update\");\r\n            console.log(response.data)\r\n            if(response.data.error){\r\n                dispatch({\r\n                    type: USER_LOGIN_FAIL,\r\n                    payload: {\r\n                        error: response.data.error.errorMessage\r\n                    }\r\n                })\r\n            } else {\r\n                let login = { isLoggedIn: true, user: response.data.user }\r\n                localStorage.login = JSON.stringify(login)\r\n    \r\n                dispatch({\r\n                    type: USER_LOGIN_SUCCESS,\r\n                    payload: {\r\n                        successMessage: response.data.successMessage,\r\n                        user: response.data.user\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: USER_LOGIN_FAIL,\r\n                payload: {\r\n                    error: error.response.data.error.errorMessage\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const userLogout = () => {\r\n    localStorage.clear()\r\n    return dispatch => dispatch({ type: USER_LOGOUT })\r\n}\r\n\r\nexport const userUpdate = (data) => {\r\n    let updateUser = data.updateUser\r\n    let username = updateUser.username\r\n    let oldKeywords = data.oldKeywords\r\n\r\n    let transferData = {\r\n        updateUser,\r\n        oldKeywords\r\n    }\r\n\r\n    return async dispatch => {\r\n        try {\r\n            let response = await Axios.put(CREATE_ROUTE(`user/${username}`), transferData)\r\n\r\n            dispatch({\r\n                type: USER_UPDATE_SUCCESS,\r\n                payload: {\r\n                    successMessage: response.data.successMessage,\r\n                    user: response.data.user\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: USER_UPDATE_FAIL,\r\n                payload: {\r\n                    error: error.response.data.error.errorMessage\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const userGet = (user) => {\r\n    let { username } = user\r\n    return async dispatch => {\r\n        try {\r\n            let response = await Axios.get(CREATE_ROUTE(`user/username/${username}`))\r\n            dispatch({\r\n                type: USER_GET_SUCCESS,\r\n                payload: {\r\n                    successMessage: \"success\",\r\n                    user: response.data\r\n                }\r\n            })\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_GET_FAIL,\r\n                payload: {\r\n                    error: error.response.data.error.errorMessage\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}